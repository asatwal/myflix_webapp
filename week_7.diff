diff --git a/Gemfile b/Gemfile
index ef9b006..e80f424 100644
--- a/Gemfile
+++ b/Gemfile
@@ -46,6 +46,8 @@ group :test do
   gem 'capybara'
   gem 'launchy'
   gem 'capybara-email'
+  gem 'webmock'
+  gem 'vcr'
 end
 
 group :production do
diff --git a/Gemfile.lock b/Gemfile.lock
index 1ae5c11..3ac3bd6 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -72,6 +72,8 @@ GEM
       execjs
     coffee-script-source (1.8.0)
     connection_pool (2.0.0)
+    crack (0.4.2)
+      safe_yaml (~> 1.0.0)
     daemons (1.1.9)
     database_cleaner (1.2.0)
     debug_inspector (0.0.2)
@@ -189,6 +191,7 @@ GEM
       rspec-core (~> 2.99.0)
       rspec-expectations (~> 2.99.0)
       rspec-mocks (~> 2.99.0)
+    safe_yaml (1.0.4)
     sass (3.2.19)
     sass-rails (4.0.4)
       railties (>= 4.0.0, < 5.0)
@@ -246,6 +249,10 @@ GEM
       kgio (~> 2.6)
       rack
       raindrops (~> 0.7)
+    vcr (2.9.3)
+    webmock (1.20.4)
+      addressable (>= 2.3.6)
+      crack (>= 0.3.2)
     xpath (2.0.0)
       nokogiri (~> 1.3)
 
@@ -290,3 +297,5 @@ DEPENDENCIES
   thin
   uglifier
   unicorn
+  vcr
+  webmock
diff --git a/app/controllers/users_controller.rb b/app/controllers/users_controller.rb
index d160a4b..afcd256 100644
--- a/app/controllers/users_controller.rb
+++ b/app/controllers/users_controller.rb
@@ -32,16 +32,16 @@ class UsersController < ApplicationController
 
         @user.save!
 
-        Stripe.api_key = Rails.configuration.stripe[:secret_key]
-
-        begin 
-          charge = Stripe::Charge.create(
-            card:        params[:stripeToken],
-            amount:      999,
-            description: "MyFliX SIgn Up charge for #{@user.email_address}",
-            currency:    'gbp')
-        rescue Stripe::CardError => e
-          flash[:danger] = e.message
+        StripeWrapper::Charge.set_api_key
+
+        charge = StripeWrapper::Charge.create(
+          card:        params[:stripeToken],
+          amount:      999,
+          description: "MyFliX SIgn Up charge for #{@user.email_address}"
+          )
+
+        unless charge.success? 
+          flash[:danger] = charge.error_message
           redirect_to :new
         end
 
diff --git a/spec/controllers/user_controller_spec.rb b/spec/controllers/user_controller_spec.rb
index e998fa6..fb69980 100644
--- a/spec/controllers/user_controller_spec.rb
+++ b/spec/controllers/user_controller_spec.rb
@@ -2,8 +2,24 @@ require 'spec_helper'
 
 describe UsersController do
 
+  before do
+    StripeWrapper::Charge.set_api_key
+  end
+
   let(:invitation) {Fabricate(:invitation, inviter: Fabricate(:user))}
 
+  let(:token) do
+    # Create a stripe token
+    token = Stripe::Token.create(
+      :card => {
+        :number => '4242424242424242',
+        :exp_month => 11,
+        :exp_year => 2018,
+        :cvc => "314"
+      },
+    ).id
+  end
+
   describe "GET new" do
 
     it "sets @user" do
@@ -58,38 +74,38 @@ describe UsersController do
     
     context "with valid inputs" do
 
-      it "creates user" do
+      it "creates user", :vcr do
         user_attrs = Fabricate.attributes_for(:user)
-        post :create, user: user_attrs
+        post :create, user: user_attrs, stripeToken: token
         expect(assigns(:user)).to eq(User.find_by(email_address: user_attrs[:email_address]))
       end
 
-      it "redirects to root_path" do
-        post :create, user: Fabricate.attributes_for(:user)
+      it "redirects to root_path", :vcr do
+        post :create, user: Fabricate.attributes_for(:user), stripeToken: token
         expect(response).to redirect_to root_path    
       end
 
-      it "sets user_id in session" do
+      it "sets user_id in session", :vcr do
         user_attrs = Fabricate.attributes_for(:user)
-        post :create, user: user_attrs
+        post :create, user: user_attrs, stripeToken: token
         expect(session[:user_id]).to eq(User.find_by(email_address: user_attrs[:email_address]).id)
       end
 
-      it "sets the inviter as follower of invitee if token exists" do
+      it "sets the inviter as follower of invitee if token exists", :vcr do
         user_attrs = Fabricate.attributes_for(:user, email_address: invitation.email_address)
-        post :create, user: user_attrs, invitation_token: invitation.token
+        post :create, user: user_attrs, invitation_token: invitation.token, stripeToken: token
         expect(invitation.inviter.follows?assigns(:user)).to be true
       end
 
-      it "sets the invitee as follower of inviter if token exists" do
+      it "sets the invitee as follower of inviter if token exists", :vcr do
         user_attrs = Fabricate.attributes_for(:user, email_address: invitation.email_address)
-        post :create, user: user_attrs, invitation_token: invitation.token
+        post :create, user: user_attrs, invitation_token: invitation.token, stripeToken: token
         expect(assigns(:user).follows?invitation.inviter).to be true
       end
 
-      it "clears invitation token" do
+      it "clears invitation token", :vcr do
         user_attrs = Fabricate.attributes_for(:user, email_address: invitation.email_address)
-        post :create, user: user_attrs, invitation_token: invitation.token
+        post :create, user: user_attrs, invitation_token: invitation.token, stripeToken: token
         expect(Invitation.find_by(email_address: invitation.email_address).token).to be_nil
       end
     end
@@ -139,36 +155,36 @@ describe UsersController do
 
     after {ActionMailer::Base.deliveries.clear}
 
-    it "sends email" do
+    it "sends email", :vcr do
       user_attrs = Fabricate.attributes_for(:user)
-      post :create, user: user_attrs
+      post :create, user: user_attrs, stripeToken: token
       ActionMailer::Base.deliveries.should_not be_empty
     end
 
-    it "sends email to correct recipient" do
+    it "sends email to correct recipient", :vcr do
       user_attrs = Fabricate.attributes_for(:user)
-      post :create, user: user_attrs
+      post :create, user: user_attrs, stripeToken: token
       message = ActionMailer::Base.deliveries.last
       message.to.should eq [user_attrs[:email_address]] 
     end
 
-    it "sends email with correct Subject" do
+    it "sends email with correct Subject", :vcr do
       user_attrs = Fabricate.attributes_for(:user)
-      post :create, user: user_attrs
+      post :create, user: user_attrs, stripeToken: token
       message = ActionMailer::Base.deliveries.last
       message.subject.should eq "Welcome to MyFlix" 
     end
 
-    it "sends email with correct content" do
+    it "sends email with correct content", :vcr do
       user_attrs = Fabricate.attributes_for(:user)
-      post :create, user: user_attrs
+      post :create, user: user_attrs, stripeToken: token
       message = ActionMailer::Base.deliveries.last
       message.body.should include user_attrs[:full_name] 
     end
 
-    it "does not send email on invalid input" do
+    it "does not send email on invalid input", :vcr do
       user_attrs = Fabricate.attributes_for(:user)
-      post :create, user: {email_address: 'bob@email.com'}
+      post :create, user: {email_address: 'bob@email.com'}, stripeToken: token
       ActionMailer::Base.deliveries.should be_empty
     end
 
diff --git a/spec/spec_helper.rb b/spec/spec_helper.rb
index 5f2ed53..7375e55 100644
--- a/spec/spec_helper.rb
+++ b/spec/spec_helper.rb
@@ -3,6 +3,7 @@ ENV["RAILS_ENV"] ||= 'test'
 require File.expand_path("../../config/environment", __FILE__)
 require 'rspec/rails'
 require 'capybara/email/rspec'
+require 'vcr'
 
 require 'sidekiq/testing'
 Sidekiq::Testing.inline!
@@ -20,6 +21,13 @@ Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }
 # If you are not using ActiveRecord, you can remove this line.
 ActiveRecord::Migration.maintain_test_schema!
 
+VCR.configure do |config|
+  config.cassette_library_dir     = 'spec/cassettes'
+  config.hook_into                :webmock
+  config.default_cassette_options = { :record => :new_episodes }
+  config.configure_rspec_metadata!
+end
+
 RSpec.configure do |config|
   # ## Mock Framework
   #
@@ -62,4 +70,7 @@ RSpec.configure do |config|
   # The different available types are documented in the features, such as in
   # https://relishapp.com/rspec/rspec-rails/v/3-0/docs
   config.infer_spec_type_from_file_location!
+
+  # VCR Requirements
+  config.treat_symbols_as_metadata_keys_with_true_values = true
 end
